name: Build Examples

on:
  push:
    paths:
      - 'builds/**'

jobs:
  build:
    name: ${{ matrix.example-dir }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-dir:
          - "rockylinux"
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

      - name: Login to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install helper packages
        run: |
          sudo apt-get update
          sudo apt-get install -y genisoimage
      - name: Set Image Tag
        run: |
          IMAGE_NAME="ghcr.io/stackers-network/hyp-test/${{ matrix.build-dir }}"
          echo "IMAGE_NAME=$IMAGE_NAME-${{ github.sha }}" >> $GITHUB_ENV

      - name: Build Dockerfile
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6
        with:
          file: builds/${{ matrix.build-dir }}/Dockerfile
          context: builds/${{ matrix.build-dir }}
          tags: |
           ${{ env.IMAGE_NAME }}

      - name: Generate Image
        run: |
          docker run --rm --privileged -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD/build:/output \
          quay.io/kairos/auroraboot:v0.5.0 \
          --debug \ 
          --set "disable_http_server=true" \
          --set "disable_netboot=true" \
          --set "container_image=${{ env.IMAGE_NAME }}" \
          --set "state_dir=/output" 

      - name: Build iso
        run: |
          mkdir build
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD/build/:/output \
          quay.io/kairos/auroraboot:latest --debug build-iso --output /output/ \
          --name kairos-${{ matrix.build-dir }}-${{ github.sha }} \
          docker:${{ env.IMAGE_NAME }}

      - name: Extract iPXE images from ISO
        run: |
          mkdir -p build
          export ISO=$(ls $PWD/*.iso)
          isoinfo -x /rootfs.squashfs -R -i ${ISO} > build/kairos.squashfs
          isoinfo -x /boot/kernel -R -i ${ISO} > build/kairos-kernel
          isoinfo -x /boot/initrd -R -i ${ISO} > build/kairos-initrd
